from typing import List
from crewai import Task
from textwrap import dedent


class CustomTasks:
    def search_stackoverflow_task(self, agent):
        """Task to search for Stack Overflow posts related to a topic."""
        return Task(
            description=dedent(
                """
                Use the SerperDev tool to search for Stack Overflow posts related to '{topic}'. 
                Select between one and 5 relevant results and obtain the sitelinks for each result.
                The url of an answer is in the format 'https://stackoverflow.com/a/<answer_id>'.
                Even if the topic is in a foreign language, you try to find the best answers from English posts because 
                it's the most common language for programming. You don't need to translate your results.
                """
            ),
            expected_output="A list of URLs of the best answers for each selected Stack Overflow post.",
            agent=agent,
        )

    def generate_stackoverflow_technical_report(self, agent):
        """Task to create a detailed technical report from Stack Overflow answers."""
        return Task(
            description=dedent(
                """
                Read the answers from the provided Stack Overflow URLs using the StackOverflowAnswerTool. 
                Create a detailed technical report that focuses on common issues and technical details of the solutions. 
                Ensure that no user-specific references or mentions of Stack Overflow are included. 
                The report should be comprehensive and retain all significant information from the answers.
                It is important to keep what the users struggle with and what they find difficult, so that the blog post can address these issues.
                Include relevant code snippets and explanations in the report.
                """
            ),
            expected_output="A detailed technical report highlighting key problems and solutions from the Stack Overflow answers.",
            agent=agent,
        )

    def find_reliable_sources_task(self, agent, topic):
        """Task to find reliable sources related to a topic for further reading."""
        # TODO : except stackoverflow
        return Task(
            description=dedent(
                f"""
                Use the SerperDev tool to search for reliable sources related to '{topic}'.
                Focus on finding authoritative and reputable sources such as official documentation.
                You can use multiple web searches using different keywords to find the best sources.
                Avoid sources like SEO-driven blogs or forums unless they are highly reputable.
                You ensure that the sources are well related to the topic. It should provide a more in-depth 
                understanding of the topic, but it should not be too advanced for beginners.
                You ensure that the sources are up-to-date. For instance, legacy.reactjs.org/docs/... 
                is not up-to-date but react.dev/reference is.
                """
            ),
            expected_output="A list of reliable sources for further reading. Between 0 and 3 sources.",
            agent=agent,
        )

    def write_task(self, agent, topic, language, context_tasks: List[Task]):
        """Task to write a detailed blog post based on the previous results."""
        return Task(
            description=dedent(
                f"""
                Write a comprehensive blog post on {topic} based on the summaries of the selected Stack Overflow answers. 
                Ensure the article is informative, engaging, and formatted in markdown. 
                The blog post is targeted towards beginners. 
                Examples are better than theory, so include code snippets and practical examples. 
                Language of the blog post should be {language}.
                Don't try to include any images or diagrams, as we can't generate them.
                Ensure that the article starts with a h1 with the title of the blog post. e.g. "# Title of the blog post"
                Conclude with a 'Further Reading' section, listing only the reliable sources discovered, no invented references.
                Do not explain that the sources are reliable, just list them.
                """
            ),
            expected_output=f"A 700 words markdown formatted blog post on {topic} in {language}.",
            agent=agent,
            context=context_tasks,
            # TODO Add context, so that it doesn't write "Bienvenue sur ce blog dédié au développement Python ! "
            # TODO : SEO optimization
        )

    def evaluation_task(self, agent, context_tasks: List[Task]):
        """Task to evaluate the blog post generated by the Blog Writer Agent."""
        return Task(
            description=dedent(
                """
                Evaluate the blog post generated by the Blog Writer Agent. Assess the content for readability, accuracy, relevance, and overall quality. 
                Ensure that translations are accurate and coherent, and that code snippets have consistent variable and function names, in the same language (e.g., English or French but not mixed).
                Provide detailed feedback on what could be improved, what might be missing, and any elements that could be removed.
                Verify that the content of the article is closely related and relevant to the assigned topic.
                Ensure that the feedback is constructive and actionable.
                Do not suggest to add diagrams or images, as we can't generate them.
                """  # TODO: Ensure that the code blocks written can run without any errors, or that explanations are provided for any errors that may occur. For instance, imports should be correct, or functions and variables not defined should be explained.
            ),
            # TODO : give the websiteExistsTool to check if the sources are still available.
            expected_output="A detailed feedback report.",
            agent=agent,
            context=context_tasks,
        )  # TODO : sometimes, suggested improvements are pertinent, but would require web searches. We would benefit from an agent that would take the suggestions and decide if web searches are necessary.

    def revision_task(self, agent, context_tasks: List[Task], topic, language):
        """Task to revise the blog post based on the evaluation feedback."""
        return Task(
            description=dedent(
                """
                Read the blog post written and the subsequent evaluation feedback. Make necessary revisions based on the feedback provided. 
                Ensure that all suggested improvements are implemented and that the blog post is polished and ready for publication.
                Don't try to include any images or diagrams, as we can't generate them.
                Ensure that the article starts with a h1 with the title of the blog post. e.g. "# Title of the blog post"
                """
            ),
            expected_output=f"A revised markdown formatted blog post on {topic} in {language}.",
            agent=agent,
            context=context_tasks,
        )  # TODO find subjects in the generated blog post that would benefit from a clarification. For instance, if the term "microtask" occurs in a blog on a javascript subject, it should be explained in a way that a beginner can understand, or removed and replaced with simpler terms.
